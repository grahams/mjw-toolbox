uplink = "em0"
wired = "em1"
vpn = "enc0"
guest = "vlan13"
cameras = "vlan106"
int_of_shit = "vlan666"

turner = "192.168.2.208"
dixieflatline = "192.168.2.209"
mnemonic = "192.168.2.210"
bigpapi = "192.168.2.42"
barneycoopersmith = "192.168.2.142"

adblock_server = "192.168.2.1"
kulon = "192.168.2.207"

# sietchtabr vpn stuff
sietchtabr = "69.4.102.188"
sietchtabr_lan = "192.168.223.0/24"

# bufferbloat shit
queue outq on $uplink flows 4096 bandwidth 22M max 22M qlimit 4096 default
#queue inq on $wired flows 4096 bandwidth 900M max 900M qlimit 4096 default

set block-policy drop
set loginterface egress
set ruleset-optimization profile
set skip on { lo0 enc0 }

table <martians> { 0.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
            172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
            192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
            203.0.113.0/24 }

# tables used to filter bad actors
table <sshbots> counters persist file "/etc/pf.sshbots"

# Zap all traffic from addresses that scan ssh
block drop log quick from { <sshbots> } to any

match in all scrub (no-df random-id max-mss 1440)
match out on egress inet from !(egress:network) to any nat-to (egress:0)

antispoof quick for { egress $wired }

# make cable modem work ok on em0
# we do this with a 'quick' rule, before almost all other rules, so we
# don't have to restructure this whole ruleset to accomodate.
# of particular importantance is the rules blocking <martians> below,
# which stop all RFC1918 traffic on egress.
pass out quick on em0 from any to 192.168.100.1 keep state

block in quick log on egress from <martians> to any
block return out quick log on egress from any to <martians>
block log all

pass out quick on egress from $wired to { 8.8.8.8 8.8.4.4 } rdr-to 192.168.2.1
pass out quick on egress from $guest to { 8.8.8.8 8.8.4.4 } rdr-to 192.168.13.1
pass out quick on egress from $cameras to { 8.8.8.8 8.8.4.4 } rdr-to 192.168.106.1
pass out quick on egress from $int_of_shit to { 8.8.8.8 8.8.4.4 } rdr-to 192.168.166.1

# block ads on Google devices such as Chromecasts and Youtube apps that 
# are often hardcoded to use Google DNS 
pass in quick to {8.8.8.8 8.8.4.4} rdr-to $adblock_server

pass out quick inet proto udp keep state
pass out quick inet proto tcp flags S/SA keep state
#pass out quick inet
pass in on { $wired } inet 
pass in on { pppx0 } inet
pass in on { $guest } inet

pass in on untrusted inet proto tcp to any port { 80 443 } 
pass out on egress inet proto tcp from untrusted to any port { 80 443 }
pass in on untrusted to untrusted 

# allow bonjour traffic from normal net to 666 VLAN
#pass quick on untrusted inet proto { tcp udp } from any to any port $bonjour_ports keep state

bonjour_ports = "{ 80 443 554 3689 5353 6002 7000 49152:65535 }"
bonjour_hosts = "{ 192.168.166.10 192.168.166.11 }"

pass quick on untrusted inet proto { tcp udp } from 192.168.2.0/24 to $bonjour_hosts port $bonjour_ports keep state
pass quick on untrusted inet proto { tcp udp } from $bonjour_hosts to 192.168.2.0/24 port $bonjour_ports keep state
pass quick on untrusted inet proto { udp } from 224.0.0.0/24 to any port 5353 keep state
pass quick on untrusted inet proto { udp } from any to 224.0.0.0/24 port 5353 keep state

# mnemonic ssh
pass in on egress proto tcp from any to (egress) port 23626 rdr-to $mnemonic port 22

# mnemonic mosh
pass in on egress proto udp from any to (egress) port 9845 rdr-to $mnemonic

# mnemonic plex
pass in on egress proto tcp from any to any port 32400 rdr-to $mnemonic

# blackice ssh
pass quick proto tcp from any to { self egress } port ssh keep state

# sietchtabr connectivity : pings, ikev2 (isakmp), ipsec
pass in  quick on egress inet proto icmp from $sietchtabr icmp-type echoreq keep state
pass in  log quick on egress proto esp from $sietchtabr
pass out log quick on egress proto esp to $sietchtabr
pass in  log quick on egress proto udp from $sietchtabr \
  port { ipsec-nat-t, isakmp } keep state
pass out log quick on egress proto udp to $sietchtabr \
  port { ipsec-nat-t, isakmp } keep state

# inside sietchtabr vpn: traffic that may be tunnelled
pass log quick on enc1 \
  from { $wired:network, (egress) } \
  to { $sietchtabr_lan, $sietchtabr }
pass log quick on enc1 \
  from { $sietchtabr_lan, $sietchtabr } \
  to { $wired:network, (egress) }

## kulon ssh via sietchtabr for synology backup
pass in quick on egress proto tcp from $sietchtabr to (egress) port 16057 rdr-to $kulon port 16057

# blackice mosh
pass quick proto udp from any to self port 18506 keep state

# redirected resilio sync traffic
pass in quick on egress proto { tcp, udp } from any to $dixieflatline port 52146
pass in quick on egress proto { tcp, udp } from any to $turner port 14296
pass in quick on egress proto { tcp, udp } from any to $bigpapi port 23442
pass in quick on egress proto { tcp, udp } from any to $barneycoopersmith port 42940

# allow ICMP/ping 
pass out on egress inet proto icmp all icmp-type echoreq keep state
pass out on $wired inet proto icmp all icmp-type echoreq keep state

# vpn
pass in on egress proto { ah esp }
pass in on egress proto udp to (egress) port { isakmp ipsec-nat-t }
pass out on egress from 10.0.1.0/24 to any nat-to (egress)
pass out on $wired from 10.0.1.0/24 to $wired:network nat-to ($wired)

# nintendo switch
pass out on $uplink from 192.168.13.18 to any nat-to ($uplink:0) static-port
