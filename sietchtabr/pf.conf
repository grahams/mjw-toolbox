# TODO(weaver) : ipv6
ext_if=em0
disk_if=em1
disk="192.168.221.2"
haven_if=em2
int_if=em3
nodeless="{ \
  72.83.160.18 \
  72.83.160.19, \
  72.83.160.20, \
  72.83.160.21, \
  72.83.160.22 }"
uplink=em0
wap="192.168.223.3"

set limit { \
  states 100000, \
  src-nodes 100000, \
  tables 10000, \
  table-entries 500000 }
set optimization conservative
set skip on { lo, bridge0 }
#set state-defaults pflow
set ruleset-optimization profile
block drop log

# tables used to filter bad actors
table <sshbots> counters persist file "/etc/pf.sshbots"

# uplink and lan limited in a bow to our actual CPU-bound pps limits.
queue fq on $ext_if   flows 2048 bandwidth 250M max 250M qlimit 2048 default
queue fq on $disk_if  flows 2048 bandwidth 1G max 1G qlimit 2048 default
queue fq on $haven_if flows 2048 bandwidth 1G max 1G qlimit 2048 default
queue fq on $int_if   flows 2048 bandwidth 300M max 300M qlimit 2048 default


# Zap all traffic from addresses that scan ssh
block drop log quick from { <sshbots> } to any

pass in log quick on $uplink from any to $nodeless keep state
pass out log quick on $uplink from $nodeless to any keep state

## external interface
pass out log quick on $ext_if \
  from { $disk_if:network, \
         $haven_if:network, \
         $int_if:network } \
  nat-to $ext_if:0 keep state
pass out log quick on $ext_if from $ext_if:0 keep state

# exposed services
pass in log on $ext_if proto tcp from any to $ext_if:0 \
  port { https, ssh } keep state

# DMZ services
pass in log on $ext_if inet proto icmp \
  from $nodeless to $ext_if:0 \
  icmp-type 8 code 0 keep state
pass in log on $ext_if proto tcp \
  from $nodeless to $ext_if:0 \
  port { domain, https, www, 853, 4949 } keep state
pass in log on $ext_if proto udp \
  from $nodeless to $ext_if:0 \
  port { domain, ntp, tftp } keep state

# DHCP on DMZ
pass in log on $ext_if proto udp from port 68 to port 67
pass out log on $ext_if proto udp from port 67 to port 68

## disk-facing physical interface
pass in quick on $disk_if proto tcp \
  from $disk_if:network to $disk_if:0 \
  port { domain, https, ssh, www, 4949 } keep state
pass in quick on $disk_if proto udp \
  from $disk_if:network to $disk_if:0 \
  port { domain, ntp } keep state
pass in quick on $disk_if proto udp from port 68 to port 67
pass out quick on $disk_if proto udp from port 67 to port 68
pass in log quick on $disk_if from $disk_if:network to any keep state
pass out log quick on $disk_if from $disk_if:0 to $disk keep state
pass out log quick on $disk_if inet proto icmp \
  from $disk_if:0 to $disk_if:network \
  icmp-type 8 code 0 keep state
pass out log quick on $disk_if \
  from $int_if:network to $disk_if:network \
  keep state


## haven-facing physical interface
pass in on $haven_if proto tcp \
  from $haven_if:network to $haven_if:0 \
  port { domain, https, ssh, www, 4949 } keep state
pass in on $haven_if proto udp \
  from $haven_if:network to $haven_if:0 \
  port { domain, ntp } keep state
pass in on $haven_if proto udp from port 68 to port 67
pass out on $haven_if proto udp from port 67 to port 68
pass in log quick on $haven_if proto tcp \
  from $haven_if:network to any \
  port { https, ssh } keep state
pass out log quick on $haven_if proto tcp \
  from { $haven_if:0, $int_if:network } to $haven_if:network \
  port { http, https, ssh, 4949 } keep state


## lan-facing physical interface
pass in quick on $int_if proto tcp \
  from $int_if:network to $int_if:0 \
  port { domain, https, ssh, www, 3000 } keep state
pass in quick on $int_if proto udp \
  from $int_if:network to $int_if:0 \
  port { domain, ntp } keep state
pass in quick on $int_if proto udp \
  from $wap to $int_if:0 \
  port syslog divert-to 127.0.0.1 port syslog keep state
pass in quick on $int_if proto udp from port 68 to port 67
pass out quick on $int_if proto udp from port 67 to port 68
pass in log quick on $int_if from $int_if:network to any keep state
pass out quick on $int_if from $int_if:0 to $int_if:network 
